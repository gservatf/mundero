#!/usr/bin/env node

// Create Solution Script - CLI Tool
// FASE 7.0 - SOLUCIONES EMPRESARIALES

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function question(query) {
    return new Promise(resolve => rl.question(query, resolve));
}

async function createSolution() {
    console.log('üöÄ Mundero Solution Creator');
    console.log('=============================\n');

    try {
        // Get solution details
        const key = await question('Solution key (e.g., "my_solution"): ');
        const name = await question('Solution name (e.g., "My Solution"): ');
        const description = await question('Description: ');
        const category = await question('Category (assessment/hr/marketing/analytics/other): ');
        const author = await question('Author: ');

        if (!key || !name || !description) {
            throw new Error('Key, name, and description are required');
        }

        const solutionDir = path.join(__dirname, '..', 'solutions', key);

        // Check if solution already exists
        if (fs.existsSync(solutionDir)) {
            throw new Error(`Solution "${key}" already exists`);
        }

        // Create solution directory structure
        fs.mkdirSync(solutionDir, { recursive: true });
        fs.mkdirSync(path.join(solutionDir, 'components'));
        fs.mkdirSync(path.join(solutionDir, 'pages'));
        fs.mkdirSync(path.join(solutionDir, 'assets'));
        fs.mkdirSync(path.join(solutionDir, 'config'));

        // Create manifest.json
        const manifest = {
            key,
            name,
            version: '1.0.0',
            description,
            author,
            category: category || 'other',
            entryPoint: './pages/Start.tsx',
            routes: [
                {
                    path: '/start',
                    component: './pages/Start.tsx',
                    name: 'Start',
                    protected: false
                },
                {
                    path: '/form',
                    component: './pages/Form.tsx',
                    name: 'Form',
                    protected: true
                },
                {
                    path: '/result',
                    component: './pages/Result.tsx',
                    name: 'Result',
                    protected: true
                }
            ],
            permissions: ['read', 'write'],
            config: {
                theme: {
                    primaryColor: '#3B82F6',
                    secondaryColor: '#10B981'
                },
                features: {
                    analytics: true,
                    exports: true
                }
            }
        };

        fs.writeFileSync(
            path.join(solutionDir, 'manifest.json'),
            JSON.stringify(manifest, null, 2)
        );

        // Create Start.tsx
        const startComponent = `// ${name} - Start Page
// Auto-generated by Mundero Solution Creator

import React from 'react';
import { Button } from '../../../components/ui/button';
import { Card } from '../../../components/ui/card';

interface StartPageProps {
    organizationId: string;
    solutionKey: string;
    onNext: () => void;
}

export const StartPage: React.FC<StartPageProps> = ({
    organizationId,
    solutionKey,
    onNext,
}) => {
    return (
        <div className="min-h-screen bg-gray-50 flex items-center justify-center">
            <Card className="p-8 max-w-md mx-auto text-center">
                <h1 className="text-2xl font-bold text-gray-900 mb-4">
                    ${name}
                </h1>
                <p className="text-gray-600 mb-6">
                    ${description}
                </p>
                <Button onClick={onNext} className="w-full">
                    Get Started
                </Button>
            </Card>
        </div>
    );
};

export default StartPage;
`;

        fs.writeFileSync(
            path.join(solutionDir, 'pages', 'Start.tsx'),
            startComponent
        );

        // Create Form.tsx
        const formComponent = `// ${name} - Form Page
// Auto-generated by Mundero Solution Creator

import React, { useState } from 'react';
import { Button } from '../../../components/ui/button';
import { Card } from '../../../components/ui/card';
import { Input } from '../../../components/ui/input';

interface FormPageProps {
    organizationId: string;
    solutionKey: string;
    onNext: (data: any) => void;
    onBack: () => void;
}

export const FormPage: React.FC<FormPageProps> = ({
    organizationId,
    solutionKey,
    onNext,
    onBack,
}) => {
    const [formData, setFormData] = useState({
        name: '',
        email: '',
    });

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        onNext(formData);
    };

    return (
        <div className="min-h-screen bg-gray-50 flex items-center justify-center">
            <Card className="p-8 max-w-md mx-auto">
                <h1 className="text-2xl font-bold text-gray-900 mb-4">
                    ${name} - Information
                </h1>
                
                <form onSubmit={handleSubmit} className="space-y-4">
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                            Name
                        </label>
                        <Input
                            type="text"
                            value={formData.name}
                            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                            required
                        />
                    </div>
                    
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                            Email
                        </label>
                        <Input
                            type="email"
                            value={formData.email}
                            onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                            required
                        />
                    </div>

                    <div className="flex space-x-3 pt-4">
                        <Button type="button" variant="outline" onClick={onBack} className="flex-1">
                            Back
                        </Button>
                        <Button type="submit" className="flex-1">
                            Submit
                        </Button>
                    </div>
                </form>
            </Card>
        </div>
    );
};

export default FormPage;
`;

        fs.writeFileSync(
            path.join(solutionDir, 'pages', 'Form.tsx'),
            formComponent
        );

        // Create Result.tsx
        const resultComponent = `// ${name} - Result Page
// Auto-generated by Mundero Solution Creator

import React from 'react';
import { Button } from '../../../components/ui/button';
import { Card } from '../../../components/ui/card';

interface ResultPageProps {
    organizationId: string;
    solutionKey: string;
    data: any;
    onRestart: () => void;
}

export const ResultPage: React.FC<ResultPageProps> = ({
    organizationId,
    solutionKey,
    data,
    onRestart,
}) => {
    return (
        <div className="min-h-screen bg-gray-50 flex items-center justify-center">
            <Card className="p-8 max-w-md mx-auto text-center">
                <div className="text-4xl mb-4">üéâ</div>
                <h1 className="text-2xl font-bold text-gray-900 mb-4">
                    Thank You!
                </h1>
                <p className="text-gray-600 mb-6">
                    Your ${name.toLowerCase()} has been completed successfully.
                </p>
                
                {data && (
                    <div className="bg-gray-50 rounded-lg p-4 mb-6 text-left">
                        <h3 className="font-medium text-gray-900 mb-2">Summary:</h3>
                        <div className="text-sm text-gray-600 space-y-1">
                            {Object.entries(data).map(([key, value]) => (
                                <div key={key}>
                                    <strong>{key}:</strong> {String(value)}
                                </div>
                            ))}
                        </div>
                    </div>
                )}

                <Button onClick={onRestart} variant="outline">
                    Start Again
                </Button>
            </Card>
        </div>
    );
};

export default ResultPage;
`;

        fs.writeFileSync(
            path.join(solutionDir, 'pages', 'Result.tsx'),
            resultComponent
        );

        // Create README.md
        const readme = `# ${name}

${description}

## Structure

- \`manifest.json\` - Solution configuration and metadata
- \`pages/\` - React components for each step
- \`components/\` - Reusable components
- \`assets/\` - Images, icons, etc.
- \`config/\` - Configuration files

## Routes

- \`/start\` - Landing page
- \`/form\` - Data collection form
- \`/result\` - Results and completion

## Development

1. Edit the components in \`pages/\` directory
2. Update \`manifest.json\` if needed
3. Add custom styles or logic as required

## Integration

This solution integrates with the Mundero platform through:
- Organization-based access control
- Event tracking and analytics
- Email notifications
- Funnel integration

Created by: ${author}
Category: ${category}
Version: 1.0.0
`;

        fs.writeFileSync(
            path.join(solutionDir, 'README.md'),
            readme
        );

        console.log(`\n‚úÖ Solution "${name}" created successfully!`);
        console.log(`üìÅ Location: ${solutionDir}`);
        console.log(`\nNext steps:`);
        console.log(`1. Customize the components in ${path.join(solutionDir, 'pages')}`);
        console.log(`2. Update manifest.json if needed`);
        console.log(`3. Register the solution in Firestore`);
        console.log(`4. Grant organization access`);

    } catch (error) {
        console.error(`\n‚ùå Error: ${error.message}`);
    } finally {
        rl.close();
    }
}

// Run if called directly
if (require.main === module) {
    createSolution();
}

module.exports = { createSolution };