// Pruebas end-to-end del sistema de onboarding
// Test de integración completa y flujo de usuario

import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';

// Importar componentes y servicios
import {
    OnboardingQuest,
    WelcomeRewardModal,
    OnboardingFeedBanner,
    OnboardingProfileSection,
    OnboardingAdmin,
    onboardingService,
    ONBOARDING_CONFIG
} from './index';

// ==================== MOCK SETUP ====================

// Mock Firebase
jest.mock('../../lib/firebase', () => ({
    db: {
        collection: jest.fn(() => ({
            doc: jest.fn(() => ({
                get: jest.fn().mockResolvedValue({
                    exists: true,
                    data: () => ({
                        steps: [],
                        completionPercentage: 0,
                        isCompleted: false
                    })
                }),
                set: jest.fn().mockResolvedValue(true),
                update: jest.fn().mockResolvedValue(true)
            })),
            where: jest.fn(() => ({
                get: jest.fn().mockResolvedValue({
                    docs: []
                })
            }))
        }))
    }
}));

// Mock user context
const mockUser = {
    uid: 'test-user-123',
    email: 'test@example.com',
    displayName: 'Test User'
};

// Mock onboarding data
const mockOnboardingProgress = {
    userId: 'test-user-123',
    questId: 'welcome-quest',
    steps: [
        {
            id: 'step-1',
            title: 'Completar Perfil',
            description: 'Completa tu información básica',
            type: 'profile_completion',
            order: 1,
            points: 50,
            isRequired: true,
            isCompleted: false,
            validationRules: {},
            category: 'setup'
        },
        {
            id: 'step-2',
            title: 'Primera Publicación',
            description: 'Haz tu primera publicación',
            type: 'first_post',
            order: 2,
            points: 75,
            isRequired: true,
            isCompleted: false,
            validationRules: {},
            category: 'engagement'
        }
    ],
    completionPercentage: 0,
    startedAt: new Date(),
    totalSteps: 2,
    isCompleted: false
};

// ==================== COMPONENT TESTS ====================

describe('OnboardingQuest Component', () => {
    test('renderiza correctamente con datos válidos', () => {
        render(
            <OnboardingQuest
                user={mockUser}
                onComplete={jest.fn()}
                onClose={jest.fn()}
            />
        );

        expect(screen.getByText(/bienvenido/i)).toBeInTheDocument();
    });

    test('muestra pasos de onboarding', async () => {
        render(
            <OnboardingQuest
                user={mockUser}
                onComplete={jest.fn()}
                onClose={jest.fn()}
            />
        );

        await waitFor(() => {
            expect(screen.getByText(/completar perfil/i)).toBeInTheDocument();
        });
    });

    test('permite completar un paso', async () => {
        const onComplete = jest.fn();

        render(
            <OnboardingQuest
                user={mockUser}
                onComplete={onComplete}
                onClose={jest.fn()}
            />
        );

        const completeButton = await screen.findByRole('button', { name: /completar/i });
        fireEvent.click(completeButton);

        await waitFor(() => {
            expect(onComplete).toHaveBeenCalled();
        });
    });
});

describe('WelcomeRewardModal Component', () => {
    test('renderiza modal de recompensa', () => {
        const mockReward = {
            title: 'Test Reward',
            description: 'Test Description',
            points: 100,
            badge: {
                id: 'test-badge',
                name: 'Test Badge',
                description: 'Test Badge Description',
                icon: '🏆'
            }
        };

        render(
            <WelcomeRewardModal
                isOpen={true}
                onClose={jest.fn()}
                reward={mockReward}
            />
        );

        expect(screen.getByText('Test Reward')).toBeInTheDocument();
        expect(screen.getByText('100')).toBeInTheDocument();
    });

    test('cierra modal al hacer clic en cerrar', () => {
        const onClose = jest.fn();

        render(
            <WelcomeRewardModal
                isOpen={true}
                onClose={onClose}
                reward={{
                    title: 'Test',
                    description: 'Test',
                    points: 100
                }}
            />
        );

        const closeButton = screen.getByRole('button', { name: /cerrar/i });
        fireEvent.click(closeButton);

        expect(onClose).toHaveBeenCalled();
    });
});

describe('OnboardingFeedBanner Component', () => {
    test('muestra banner cuando onboarding no está completo', () => {
        render(
            <OnboardingFeedBanner
                user={mockUser}
                progress={mockOnboardingProgress}
            />
        );

        expect(screen.getByText(/continúa tu aventura/i)).toBeInTheDocument();
    });

    test('no muestra banner cuando onboarding está completo', () => {
        const completedProgress = {
            ...mockOnboardingProgress,
            completionPercentage: 100,
            isCompleted: true
        };

        const { container } = render(
            <OnboardingFeedBanner
                user={mockUser}
                progress={completedProgress}
            />
        );

        expect(container.firstChild).toBeNull();
    });
});

describe('OnboardingProfileSection Component', () => {
    test('muestra progreso en perfil', () => {
        render(
            <OnboardingProfileSection
                user={mockUser}
                progress={mockOnboardingProgress}
            />
        );

        expect(screen.getByText(/progreso del onboarding/i)).toBeInTheDocument();
    });

    test('muestra medallas desbloqueadas', async () => {
        const progressWithBadges = {
            ...mockOnboardingProgress,
            unlockedBadges: ['profile_complete']
        };

        render(
            <OnboardingProfileSection
                user={mockUser}
                progress={progressWithBadges}
            />
        );

        await waitFor(() => {
            expect(screen.getByText(/medallas/i)).toBeInTheDocument();
        });
    });
});

// ==================== INTEGRATION TESTS ====================

describe('Onboarding System Integration', () => {
    test('flujo completo de onboarding', async () => {
        // Setup: Usuario nuevo inicia onboarding
        const { rerender } = render(
            <OnboardingQuest
                user={mockUser}
                onComplete={jest.fn()}
                onClose={jest.fn()}
            />
        );

        // Step 1: Verificar que se muestra el primer paso
        await waitFor(() => {
            expect(screen.getByText(/completar perfil/i)).toBeInTheDocument();
        });

        // Step 2: Completar primer paso
        const firstStepButton = await screen.findByRole('button', { name: /completar/i });
        fireEvent.click(firstStepButton);

        // Step 3: Verificar progreso actualizado
        await waitFor(() => {
            expect(screen.getByText(/50%/)).toBeInTheDocument();
        });

        // Step 4: Verificar que aparece segundo paso
        await waitFor(() => {
            expect(screen.getByText(/primera publicación/i)).toBeInTheDocument();
        });
    });

    test('integración con sistema de badges', async () => {
        // Mock badge service response
        const mockBadgeUnlock = jest.fn().mockResolvedValue({
            success: true,
            badge: {
                id: 'profile_complete',
                name: 'Perfil Completo',
                description: 'Has completado tu perfil'
            }
        });

        // Simular desbloqueo de badge
        await mockBadgeUnlock('test-user-123', 'profile_complete');

        expect(mockBadgeUnlock).toHaveBeenCalledWith('test-user-123', 'profile_complete');
    });

    test('persistencia de progreso', async () => {
        // Mock Firestore operations
        const mockSet = jest.fn().mockResolvedValue(true);
        const mockGet = jest.fn().mockResolvedValue({
            exists: true,
            data: () => mockOnboardingProgress
        });

        // Simular guardado de progreso
        await mockSet(mockOnboardingProgress);

        // Simular carga de progreso
        const loadedProgress = await mockGet();

        expect(loadedProgress.data()).toEqual(mockOnboardingProgress);
    });
});

// ==================== PERFORMANCE TESTS ====================

describe('Performance Tests', () => {
    test('componente carga en menos de 3 segundos', async () => {
        const startTime = performance.now();

        render(
            <OnboardingQuest
                user={mockUser}
                onComplete={jest.fn()}
                onClose={jest.fn()}
            />
        );

        await waitFor(() => {
            expect(screen.getByText(/bienvenido/i)).toBeInTheDocument();
        });

        const endTime = performance.now();
        const loadTime = endTime - startTime;

        expect(loadTime).toBeLessThan(3000);
    });

    test('no hay memory leaks en listeners', () => {
        const { unmount } = render(
            <OnboardingQuest
                user={mockUser}
                onComplete={jest.fn()}
                onClose={jest.fn()}
            />
        );

        // Simular unmount del componente
        unmount();

        // En un test real, verificaríamos que los listeners se han limpiado
        expect(true).toBe(true);
    });
});

// ==================== ACCESSIBILITY TESTS ====================

describe('Accessibility Tests', () => {
    test('componentes tienen aria-labels apropiados', () => {
        render(
            <OnboardingQuest
                user={mockUser}
                onComplete={jest.fn()}
                onClose={jest.fn()}
            />
        );

        const buttons = screen.getAllByRole('button');
        buttons.forEach(button => {
            expect(button).toHaveAttribute('aria-label');
        });
    });

    test('navegación por teclado funciona', () => {
        render(
            <OnboardingQuest
                user={mockUser}
                onComplete={jest.fn()}
                onClose={jest.fn()}
            />
        );

        const firstButton = screen.getAllByRole('button')[0];
        firstButton.focus();

        expect(document.activeElement).toBe(firstButton);
    });
});

// ==================== ERROR HANDLING TESTS ====================

describe('Error Handling', () => {
    test('maneja errores de Firestore gracefully', async () => {
        // Mock error
        const mockError = new Error('Firestore connection failed');
        jest.spyOn(console, 'error').mockImplementation(() => { });

        // Simular error en carga de datos
        const mockErrorGet = jest.fn().mockRejectedValue(mockError);

        await expect(mockErrorGet()).rejects.toThrow('Firestore connection failed');
    });

    test('muestra mensaje de error al usuario', async () => {
        render(
            <OnboardingQuest
                user={null} // Usuario inválido
                onComplete={jest.fn()}
                onClose={jest.fn()}
            />
        );

        await waitFor(() => {
            expect(screen.getByText(/error/i)).toBeInTheDocument();
        });
    });
});

// ==================== MOBILE RESPONSIVE TESTS ====================

describe('Mobile Responsive Tests', () => {
    test('componentes se adaptan a pantallas móviles', () => {
        // Mock mobile viewport
        Object.defineProperty(window, 'innerWidth', {
            writable: true,
            configurable: true,
            value: 375,
        });

        render(
            <OnboardingQuest
                user={mockUser}
                onComplete={jest.fn()}
                onClose={jest.fn()}
            />
        );

        // Verificar que los componentes usan clases responsivas
        const container = screen.getByTestId('onboarding-container');
        expect(container).toHaveClass('flex-col');
    });
});

// ==================== UTILITY FUNCTIONS ====================

export const testUtils = {
    // Crear usuario mock
    createMockUser: (overrides = {}) => ({
        ...mockUser,
        ...overrides
    }),

    // Crear progreso mock
    createMockProgress: (overrides = {}) => ({
        ...mockOnboardingProgress,
        ...overrides
    }),

    // Simular completar paso
    simulateStepCompletion: async (stepId: string) => {
        // Mock implementation
        return {
            success: true,
            stepId,
            completedAt: new Date()
        };
    },

    // Verificar estructura de datos
    validateDataStructure: (data: any, schema: any) => {
        // Simple validation implementation
        return Object.keys(schema).every(key => key in data);
    }
};

// ==================== EXPORT PARA USO EXTERNO ====================

export default {
    testUtils,
    mockUser,
    mockOnboardingProgress
};